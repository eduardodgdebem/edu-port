---
import Card from "../components/Card.astro";

type gitHubProject = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  private: boolean;
  owner: {};
  html_url: string;
  description: string;
  fork: boolean;
  url: string;
  created_at: any;
  updated_at: any;
  pushed_at: any;
  git_url: string;
  clone_url: string;
  homepage: string;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string;
  archived: boolean;
  visibility: string;
};

const projectList = await fetch(
  "https://api.github.com/users/eduardodgdebem/repos",
  {
    headers: {
      Authorization: "Bearer " + process.env.GIT_AUTH,
    },
  }
)
  .then((res) => res.json())
  .then((projects: gitHubProject[]) => {
    if (!projects?.length) return;
    return projects
      ?.sort((a, b) => {
        const aDate = new Date(b.updated_at) as unknown as number;
        const bDate = new Date(a.updated_at) as unknown as number;
        return aDate - bDate;
      })
      .filter((project) => project?.homepage);
  });


const projectListTitles = projectList?.map(({ name }) => name) ?? [];
---

<main
  data-titles={projectListTitles}
  id="main-projects"
  class="p-2 rounded-lg border-2 text-vanila"
>
  <h2 class="text-2xl font-bol text-gray-dark m-2">Projects:</h2>
  <ul class="grid grid-cols-[repeat(auto-fill,_minmax(20rem,_1fr))] gap-2">
    {
      projectList?.map((t) => (
        <Card href={t.homepage} title={t.name} body={t.description} githubLink={t.html_url}/>
      ))
    }
  </ul>
</main>

<script>
  let main = document.getElementById("main-projects");
  let cardTitles = main?.dataset.titles?.split(",");

  cardTitles?.forEach((title) => {
    let cardElement = document.getElementById(title);
    let gloomElement = document.getElementById("gloom-" + title);

    if (!cardElement) return;
    cardElement?.addEventListener("mousemove", (e) => {
      if (!gloomElement || !cardElement) return;
      const { x, y } = cardElement.getBoundingClientRect();
      const trueX = e.clientX - x;
      const trueY = e.clientY - y;

      gloomElement.style.left = `${trueX}px`;
      gloomElement.style.top = `${trueY}px`;
    });

    cardElement?.addEventListener("mouseenter", (e) => {
      if (!gloomElement) return;
      gloomElement.style.visibility = "visible";
    });
    cardElement?.addEventListener("mouseleave", (e) => {
      if (!gloomElement) return;
      gloomElement.style.visibility = "hidden";
    });
  });
</script>
